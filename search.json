[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto CRC Book",
    "section": "",
    "text": "Preface\nThis is a Quarto book."
  },
  {
    "objectID": "index.html#software-conventions",
    "href": "index.html#software-conventions",
    "title": "Quarto CRC Book",
    "section": "Software conventions",
    "text": "Software conventions\n\n1 + 1\n\n2\n\n\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Quarto CRC Book",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nBlah, blah, blah…"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "",
    "text": "2 — BUSSINESS UNDERSTANDING —\nDari tahap data understanding dapat disimpulkan bahwa\nSetelah memahami data, akan dilakukan tahap preprocessing untuk menangani masalah pada data yang sudah didefinisikan pada data understanding, yakni. 1. Menghapus Outlier\nSetelah data siap, akan dilakukan : 1. Normalisasi Data 2. Eksplorasi Model\nSetelah dilakukan skenario perulangan untuk menghasilkan model terbaik, dapat diketahui bahwasannya model klasifikasi yang terbaik untuk data anggur merah ini adalah dengan menggunakan : - Metode Random Forest - Metode normalisasi nya adalah MINMAX Scaler - Banyak Fitur yang digunakan dalam data sebanyak 23 fitur - Parameter dalam metode yang akan digunakan, sebagai berikut:\nimport pandas as pd\n\n# kolom-kolom yang ingin Anda pertahankan\nkolom_pilihan = ['Application mode', 'Course', 'Previous qualification', \"Father's qualification\", \"Mother's occupation\", 'Debtor', \n                 'Tuition fees up to date', 'Scholarship holder', 'Age at enrollment', 'Curricular units 1st sem (enrolled)', \n                 'Curricular units 1st sem (evaluations)', 'Curricular units 1st sem (approved)', 'Curricular units 1st sem (grade)', \n                 'Curricular units 2nd sem (enrolled)', 'Curricular units 2nd sem (evaluations)', 'Curricular units 2nd sem (approved)', \n                 'Curricular units 2nd sem (grade)','Target']\n\n# Buat dataset baru hanya dengan kolom yang dipilih\ndataset_baru = data_nonoutliers[kolom_pilihan]\n\n# Simpan dataset baru dalam file CSV\ndataset_baru.to_csv('dataset_baru.csv', index=False)  # Simpan ke file CSV tanpa menyertakan indeks\nfrom sklearn.model_selection import train_test_split\n\n# memisahkan kolom fitur dan target\nfitur = dataset_baru.drop(columns=['Target'], axis =1)\ntarget = dataset_baru['Target']\n\n# melakukan pembagian dataset, dataset dibagi menjadi 80% data training dan 20% data testing\nfitur_train, fitur_test, target_train, target_test = train_test_split(fitur, target, test_size = 0.2, random_state=42)\nimport pickle\nfrom sklearn.preprocessing import MinMaxScaler\n\n# menentukan lokasi file pickle akan disimpan\npath = 'minmaxscaler_baru.pkl'\n\n# membuat dan melatih objek MinMaxScaler\nminmaxscaler = MinMaxScaler()\nminmaxscaler.fit(fitur_train)\n\n# menyimpan model ke dalam file pickle\nwith open(path, 'wb') as file:\n    pickle.dump(minmaxscaler, file)\n\n# memanggil kembali model normalisasi minmaxscaler dari file pickle\nwith open(path, 'rb') as file:\n    minmaxscaler = pickle.load(file)\n\n# menerapkan normalisasi zscore pada data training\nminmaxtraining = minmaxscaler.transform(fitur_train)\n\n# menerapkan normalisasi zscore pada data testing\nminmaxtesting = minmaxscaler.transform(fitur_test)\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# mendefinisikan ruang parameter\nparam_grid = {\n    'n_estimators': [50, 100, 200],\n    'max_depth': [None, 10, 20],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\n\n# membuat model\nmodel = RandomForestClassifier()\n\n# menggunakan modul gridsearch untuk mencari parameter terbaik\ngrid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, scoring='accuracy', verbose=2, n_jobs=-1)\ngrid_search.fit(fitur_train, target_train)\n\nbest_params = grid_search.best_params_\nbest_model = grid_search.best_estimator_\n\n# menampilkan parameter terbaik\nprint(\"Best Parameters:\", best_params)\nprint(\"Best Model:\", best_model)\n\nFitting 5 folds for each of 81 candidates, totalling 405 fits\n\n\nBest Parameters: {'max_depth': 20, 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 200}\nBest Model: RandomForestClassifier(max_depth=20, min_samples_leaf=2, n_estimators=200)\nimport pickle\n\n# menentukan lokasi file pickle akan disimpan\npath_rf = 'best_model.pkl'\nwith open(path_rf, 'wb') as model_file:\n    pickle.dump(best_model, model_file)\nPada tahap ini model terbaik yang diperoleh pada tahap modeling dilakukan validasi dengan menampilkan nilai confusion matrix nya atau laporan klasifikasinya dengan menggunakan grafik ROC-AUC"
  },
  {
    "objectID": "test.html#tujuan",
    "href": "test.html#tujuan",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "2.1 Tujuan",
    "text": "2.1 Tujuan\nMelakukan klasifikasi untuk menentukan predikat kelulusan mahasiswa yang berasal dari berbagai jurusan berdasarkan ciri - ciri tertentu.\nUntuk menentukan predikat kelulusan mahasiswa dapat ditentukan melalui ciri - ciri berikut :"
  },
  {
    "objectID": "test.html#fitur-pada-dataset",
    "href": "test.html#fitur-pada-dataset",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "2.2 Fitur Pada Dataset",
    "text": "2.2 Fitur Pada Dataset\n\nTarget (label)\nMarital Status (Status)\n\nApplication Mode (metode penerapan dari tugas akhir yang digunakan siswa)\nApplication Order (urutan siswa yang melamar)\nCourse (kursus yang diambil siswa)\n\nDaytime/evening (waktu kursus)\n\nPrevious Qualification (kualifikasi yang telah diambil sebelumnya)\n\nNacionality (kewarganegaraan)\n\nMother's Qualification (kualifikasi dari ibu siswa)\n\nFather's Qualification (kualifikasi dari ayah siswa)\n\nMother's Occupation (pekerjaan ibu)\n\nFather's Occupation (pekerjaan ayah)\n\nDisplaced (terlantar)\n\nEducational Special Need (membutuhkan pendidikan tambahan)\n\nDebtor (memiliki tanggungan)\n\nTuition fees up to date (biaya kuliah terbaru)\n\nGender\n\nScholarship Holder (memiliki sertifikat)\n\nAge at enrollment (usia ketika terdaftar)\nInternacional (termasuk murid internasional atau tidak)\n\nCurricular units 1st sem (credited) (jumlah mata kuliah kurikuler yang dikreditkan mahasiswa pada semester pertama)\nCurricular units 1st sem (enrolled) (jumlah mata kuliah kurikuler yang didaftarkan mahasiswa pada semester pertama)\nCurricular units 1st sem (evaluations) (jumlah mata kuliah kurikuler yang dinilai mahasiswa pada semester pertama)\nCurricular units 1st sem (approved) (jumlah mata kuliah kurikuler yang disetujui mahasiswa pada semester pertama)\nCurricular units 1st sem (grade) (nilai rata - rata mata kuliah kurikuler mahasiswa pada semester pertama)\nCurricular units 1st sem (without evaluations) (jumlah mata kuliah kurikuler yang tidak dinilai mahasiswa pada semester pertama)\nCurricular units 2nd sem (credited) (jumlah mata kuliah kurikuler yang dikreditkan mahasiswa pada semester kedua)\nCurricular units 2nd sem (enrolled) (jumlah mata kuliah kurikuler yang didaftarkan mahasiswa pada semester kedua)\nCurricular units 2nd sem (evaluations) (jumlah mata kuliah kurikuler yang dinilai mahasiswa pada semester kedua)\nCurricular units 2nd sem (approved) (jumlah mata kuliah kurikuler yang disetujui mahasiswa pada semester kedua)\nCurricular units 2nd sem (grade) (nilai rata - rata mata kuliah kurikuler mahasiswa pada semester kedua)\nCurricular units 2nd sem (without evaluations) (jumlah mata kuliah kurikuler yang tidak dinilai mahasiswa pada semester kedua)\nUnemployment rate (persentase pengangguran)\nInflation rate (persentasi inflasi)\nGDP"
  },
  {
    "objectID": "test.html#teknik-pengumpulan-data",
    "href": "test.html#teknik-pengumpulan-data",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "3.1 Teknik Pengumpulan Data",
    "text": "3.1 Teknik Pengumpulan Data\nKumpulan data ini dibuat dari institusi pendidikan tinggi (diperoleh dari beberapa database terpisah) terkait mahasiswa yang terdaftar di berbagai gelar sarjana, seperti agronomi, desain, pendidikan, keperawatan, jurnalisme, manajemen, pelayanan sosial, dan teknologi. Dataset tersebut mencakup informasi yang diketahui pada saat pendaftaran mahasiswa (jalur akademik, demografi, dan faktor sosial ekonomi) dan prestasi akademik mahasiswa pada akhir semester pertama dan kedua. Masalah dirumuskan sebagai tugas klasifikasi tiga kategori, di mana terdapat ketidakseimbangan yang kuat pada salah satu kelas.\nData ini dibuat dalam sebuah proyek yang bertujuan untuk berkontribusi pada pengurangan angka putus sekolah dan kegagalan akademik di pendidikan tinggi, dengan menggunakan teknik pembelajaran mesin untuk mengidentifikasi siswa yang berisiko pada tahap awal jalur akademik mereka, sehingga strategi untuk mendukung mereka dapat diambil. Kumpulan data ini didukung oleh program SATDAP - Capacitação da Administração Pública berdasarkan hibah POCI-05-5762-FSE-000191, Portugal.\nJumlah Dataset sebanyak 4424 dengan rincian sebagai berikut: - Mahasiswa dengan predikat “Graduate”/“Lulus” (2) : 2209 - Mahasiswa dengan predikat “Dropout”/“Tidak Lulus” (0) : 1421 - Mahasiswa dengan predikat “Enrolled”/“Belum Lulus” (1) : 794"
  },
  {
    "objectID": "test.html#mengidentifikasi-fitur",
    "href": "test.html#mengidentifikasi-fitur",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "3.2 Mengidentifikasi Fitur",
    "text": "3.2 Mengidentifikasi Fitur\n\nimport pandas as pd\n\n# membaca data dan ditampilkan\ndata = pd.read_csv('dataset.csv')\ndata.head(5)\n\n\n\n\n\n\n\n\nMarital status\nApplication mode\nApplication order\nCourse\nDaytime/evening attendance\nPrevious qualification\nNacionality\nMother's qualification\nFather's qualification\nMother's occupation\n...\nCurricular units 2nd sem (credited)\nCurricular units 2nd sem (enrolled)\nCurricular units 2nd sem (evaluations)\nCurricular units 2nd sem (approved)\nCurricular units 2nd sem (grade)\nCurricular units 2nd sem (without evaluations)\nUnemployment rate\nInflation rate\nGDP\nTarget\n\n\n\n\n0\n1\n8\n5\n2\n1\n1\n1\n13\n10\n6\n...\n0\n0\n0\n0\n0.000000\n0\n10.8\n1.4\n1.74\nDropout\n\n\n1\n1\n6\n1\n11\n1\n1\n1\n1\n3\n4\n...\n0\n6\n6\n6\n13.666667\n0\n13.9\n-0.3\n0.79\nGraduate\n\n\n2\n1\n1\n5\n5\n1\n1\n1\n22\n27\n10\n...\n0\n6\n0\n0\n0.000000\n0\n10.8\n1.4\n1.74\nDropout\n\n\n3\n1\n8\n2\n15\n1\n1\n1\n23\n27\n6\n...\n0\n6\n10\n5\n12.400000\n0\n9.4\n-0.8\n-3.12\nGraduate\n\n\n4\n2\n12\n1\n3\n0\n1\n1\n22\n28\n10\n...\n0\n6\n6\n6\n13.000000\n0\n13.9\n-0.3\n0.79\nGraduate\n\n\n\n\n5 rows × 35 columns\n\n\n\n\n# Rincian dataset (banyak data dan kolom)\nprint(\"Banyaknya data : \", data.shape[0])\nprint(\"Banyaknya kolom : \", data.shape[1])\n\nBanyaknya data :  4424\nBanyaknya kolom :  35\n\n\n\n3.2.1 Deskripsi Fitur\n\nTarget (label predikat mahasiswa setelah melalui identifikasi data setiap ciri - ciri) &gt; Graduate\n&gt; Enrolled\n&gt; Dropout\nMarital Status (Status pernikahan mahasiswa)\n1 - single\n2 - married\n3 - widower\n4 - divorced\n5 - facto\n6 - legally\nApplication Mode (metode penerapan dari tugas akhir pada semester 1 dan 2 yang digunakan siswa)\n1 - 1st phase - general contingent\n2 - Ordinance No. 612/93\n3 - 1st phase - special contingent (Azores Island)\n4 - Holders of other higher courses\n5 - Ordinance No. 854-B/99\n6 - International student (bachelor)\n7 - 1st phase - special contingent (Madeira Island)\n8 - 2nd phase - general contingent\n9 - 3rd phase - general contingent\n10 - Ordinance No. 533-A/99, item b2 (Different Plan)\n11 - Ordinance No. 533-A/99, item b3 (Other Institution)\n12 - Over 23 years old\n13 - Transfer\n14 - Change of course\n15 - Technological specialization diploma holders\n16 - Change of institution/course\n17 - Short cycle diploma holders\n18 - Change of institution/course (International)\nApplication Order (urutan siswa yang melamar pada semester 1 dan 2)\nCourse (kursus yang pernah diambil siswa)\n1 - Biofuel Production Technologies\n2 - Animation and Multimedia Design\n3 - Social Service (evening attendance)\n4 - Agronomy 9070 - Communication Design\n5 - Communication Design\n6 - Veterinary Nursing\n7 - Informatics Engineering\n8 - Equinculture\n9 - Management\n10 - Social Service\n11 - Tourism\n12 - Nursing\n13 - Oral Hygiene\n14 - Advertising and Marketing Management\n15 - Journalism and Communication\n16 - Basic Education\n17 - Management (evening attendance)\nDaytime/evening (waktu kursus yang pernah diambil siswa) 1 - daytime\n0 - evening\nPrevious Qualification (pendidikan terakhir dari siswa)\n1 - Secondary education\n2 - Higher education - bachelor’s degree\n3 - Higher education - degree\n4 - Higher education - master’s\n5 - Higher education - doctorate\n6 - Frequency of higher education\n7 - 12th year of schooling - not completed\n8 - 11th year of schooling - not completed\n9 - Other - 11th year of schooling\n10 - 10th year of schooling\n11 - 10th year of schooling - not completed\n12 - Basic education 3rd cycle (9th/10th/11th year) or equiv.\n13 - Basic education 2nd cycle (6th/7th/8th year) or equiv.\n14 - Technological specialization course\n15 - Higher education - degree (1st cycle)\n16 - Professional higher technical course\n17 - Higher education - master (2nd cycle)\nNacionality (kewarganegaraan siswa)\n1 - Portuguese\n2 - German\n3 - Spanish\n4 - Italian\n5 - Dutch\n6 - English\n7 - Lithuanian\n8 - Angolan\n9 - Cape Verdean\n10 - Guinean\n11 - Mozambican\n12 - Santomean\n13 - Turkish\n14 - Brazilian\n15 - Romanian\n16 - Moldova (Republic of)\n17 - Mexican\n18 - Ukrainian\n19 - Russian\n20 - Cuban\n21 - Colombian\nMother's Qualification (pendidikan terakhir dari ibu siswa)\n1 - Secondary Education - 12th Year of Schooling or Eq.\n2 - Higher Education - Bachelor’s Degree\n3 - Higher Education - Degree\n4 - Higher Education - Master’s\n5 - Higher Education - Doctorate\n6 - Frequency of Higher Education\n7 - 12th Year of Schooling - Not Completed\n8 - 11th Year of Schooling - Not Completed\n9 - 7th Year (Old)\n10 - Other - 11th Year of Schooling\n11 - 2nd year complementary high school course\n12 - 10th Year of Schooling\n13 - General commerce course\n14 - Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv.\n15 - Complementary High School Course\n16 - Technical-professional course\n17 - Complementary High School Course - not concluded\n18 - 7th year of schooling\n19 - 2nd cycle of the general high school course\n20 - 9th Year of Schooling - Not Completed\n21 - 8th year of schooling\n22 - General Course of Administration and Commerce\n23 - Supplementary Accounting and Administration\n24 - Unknown\n25 - Can’t read or write\n26 - Can read without having a 4th year of schooling\n27 - Basic education 1st cycle (4th/5th year) or equiv.\n28 - Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv.\n29 - Technological specialization course\n30 - Higher education - degree (1st cycle)\n31 - Specialized higher studies course\n32 - Professional higher technical course\n33 - Higher Education - Master (2nd cycle)\n34 - Higher Education - Doctorate (3rd cycle)\nFather's Qualification (pendidikan terakhir dari ayah siswa)\n1 - Secondary Education - 12th Year of Schooling or Eq.\n2 - Higher Education - Bachelor’s Degree\n3 - Higher Education - Degree\n4 - Higher Education - Master’s\n5 - Higher Education - Doctorate\n6 - Frequency of Higher Education\n7 - 12th Year of Schooling - Not Completed\n8 - 11th Year of Schooling - Not Completed\n9 - 7th Year (Old)\n10 - Other - 11th Year of Schooling\n11 - 2nd year complementary high school course\n12 - 10th Year of Schooling\n13 - General commerce course\n14 - Basic Education 3rd Cycle (9th/10th/11th Year) or Equiv.\n15 - Complementary High School Course\n16 - Technical-professional course\n17 - Complementary High School Course - not concluded\n18 - 7th year of schooling\n19 - 2nd cycle of the general high school course\n20 - 9th Year of Schooling - Not Completed\n21 - 8th year of schooling\n22 - General Course of Administration and Commerce\n23 - Supplementary Accounting and Administration\n24 - Unknown\n25 - Can’t read or write\n26 - Can read without having a 4th year of schooling\n27 - Basic education 1st cycle (4th/5th year) or equiv.\n28 - Basic Education 2nd Cycle (6th/7th/8th Year) or Equiv.\n29 - Technological specialization course\n30 - Higher education - degree (1st cycle)\n31 - Specialized higher studies course\n32 - Professional higher technical course\n33 - Higher Education - Master (2nd cycle)\n34 - Higher Education - Doctorate (3rd cycle)\nMother's Occupation (pekerjaan ibu siswa)\n0 - Student\n1 - Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers\n2 - Specialists in Intellectual and Scientific Activities\n3 - Intermediate Level Technicians and Professions\n4 - Administrative staff\n5 - Personal Services, Security and Safety Workers and Sellers\n6 - Farmers and Skilled Workers in Agriculture, Fisheries and Forestry\n7 - Skilled Workers in Industry, Construction and Craftsmen\n8 - Installation and Machine Operators and Assembly Workers\n9 - Unskilled Workers\n10 - Armed Forces Professions\n11 - Other Situation\n12 - (blank)\n13 - Health professionals\n14 - teachers\n15 - Specialists in information and communication technologies (ICT)\n16 - Intermediate level science and engineering technicians and professions\n17 - Technicians and professionals, of intermediate level of health\n18 - Intermediate level technicians from legal, social, sports, cultural and similar services\n19 - Office workers, secretaries in general and data processing operators\n20 - Data, accounting, statistical, financial services and registry-related operators\n21 - Other administrative support staff\n22 - personal service workers\n23 - sellers\n24 - Personal care workers and the like\n25 - Skilled construction workers and the like, except electricians\n26 - Skilled workers in printing, precision instrument manufacturing, jewelers, artisans and the like\n27 - Workers in food processing, woodworking, clothing and other industries and crafts\n28 - cleaning workers\n29 - Unskilled workers in agriculture, animal production, fisheries and forestry\n30 - Unskilled workers in extractive industry, construction, manufacturing and transport\n31 - Meal preparation assistants\nFather's Occupation (pekerjaan ayah siswa)\n0 - Student\n1 - Representatives of the Legislative Power and Executive Bodies, Directors, Directors and Executive Managers\n2 - Specialists in Intellectual and Scientific Activities\n3 - Intermediate Level Technicians and Professions\n4 - Administrative staff\n5 - Personal Services, Security and Safety Workers and Sellers\n6 - Farmers and Skilled Workers in Agriculture, Fisheries and Forestry\n7 - Skilled Workers in Industry, Construction and Craftsmen\n8 - Installation and Machine Operators and Assembly Workers\n9 - Unskilled Workers\n10 - Armed Forces Professions\n11 - Other Situation\n12 - (blank)\n13 - Health professionals\n14 - teachers\n15 - Specialists in information and communication technologies (ICT)\n16 - Intermediate level science and engineering technicians and professions\n17 - Technicians and professionals, of intermediate level of health\n18 - Intermediate level technicians from legal, social, sports, cultural and similar services\n19 - Office workers, secretaries in general and data processing operators\n20 - Data, accounting, statistical, financial services and registry-related operators\n21 - Other administrative support staff\n22 - personal service workers\n23 - sellers\n24 - Personal care workers and the like\n25 - Skilled construction workers and the like, except electricians\n26 - Skilled workers in printing, precision instrument manufacturing, jewelers, artisans and the like\n27 - Workers in food processing, woodworking, clothing and other industries and crafts\n28 - cleaning workers\n29 - Unskilled workers in agriculture, animal production, fisheries and forestry\n30 - Unskilled workers in extractive industry, construction, manufacturing and transport\n31 - Meal preparation assistants\nDisplaced (keadaan keluarga siswa apakah termasuk kelaurga cukup atau tidak)\n1 - yes\n0 - no\nEducational Special Need (apakah siswa membutuhkan pendidikan tambahan)\n1 - yes\n0 - no\nDebtor (apakah siswa memiliki tanggungan berupa hutang)\n1 - yes\n0 - no\nTuition fees up to date (apakah siswa telah membayar biaya kuliah terakhir)\n1 - yes\n0 - no\nGender\n1 - male\n0 - female\nScholarship Holder (sertifikat yang dimiliki siswa)\n1 - yes\n0 - no\nAge at enrollment (usia siswa ketika terdaftar di kampus)\nInternacional (termasuk murid internasional atau tidak)\n1 - yes\n0 - no\nCurricular units 1st sem (credited) (jumlah mata kuliah kurikuler yang dikreditkan mahasiswa pada semester pertama)\nCurricular units 1st sem (enrolled) (jumlah mata kuliah kurikuler yang didaftarkan mahasiswa pada semester pertama)\nCurricular units 1st sem (evaluations) (jumlah mata kuliah kurikuler yang dinilai mahasiswa pada semester pertama)\nCurricular units 1st sem (approved) (jumlah mata kuliah kurikuler yang disetujui mahasiswa pada semester pertama)\nCurricular units 1st sem (grade) (nilai rata - rata mata kuliah kurikuler mahasiswa pada semester pertama)\nCurricular units 1st sem (without evaluations) (jumlah mata kuliah kurikuler yang tidak dinilai mahasiswa pada semester pertama)\nCurricular units 2nd sem (credited) (jumlah mata kuliah kurikuler yang dikreditkan mahasiswa pada semester kedua)\nCurricular units 2nd sem (enrolled) (jumlah mata kuliah kurikuler yang didaftarkan mahasiswa pada semester kedua)\nCurricular units 2nd sem (evaluations) (jumlah mata kuliah kurikuler yang dinilai mahasiswa pada semester kedua)\nCurricular units 2nd sem (approved) (jumlah mata kuliah kurikuler yang disetujui mahasiswa pada semester kedua)\nCurricular units 2nd sem (grade) (nilai rata - rata mata kuliah kurikuler mahasiswa pada semester kedua)\nCurricular units 2nd sem (without evaluations) (jumlah mata kuliah kurikuler yang tidak dinilai mahasiswa pada semester kedua)\nUnemployment rate (persentase pengangguran)\nInflation rate (persentasi inflasi)\nGDP\n\n\ndata.columns\n\nIndex(['Marital status', 'Application mode', 'Application order', 'Course',\n       'Daytime/evening attendance', 'Previous qualification', 'Nacionality',\n       'Mother's qualification', 'Father's qualification',\n       'Mother's occupation', 'Father's occupation', 'Displaced',\n       'Educational special needs', 'Debtor', 'Tuition fees up to date',\n       'Gender', 'Scholarship holder', 'Age at enrollment', 'International',\n       'Curricular units 1st sem (credited)',\n       'Curricular units 1st sem (enrolled)',\n       'Curricular units 1st sem (evaluations)',\n       'Curricular units 1st sem (approved)',\n       'Curricular units 1st sem (grade)',\n       'Curricular units 1st sem (without evaluations)',\n       'Curricular units 2nd sem (credited)',\n       'Curricular units 2nd sem (enrolled)',\n       'Curricular units 2nd sem (evaluations)',\n       'Curricular units 2nd sem (approved)',\n       'Curricular units 2nd sem (grade)',\n       'Curricular units 2nd sem (without evaluations)', 'Unemployment rate',\n       'Inflation rate', 'GDP', 'Target'],\n      dtype='object')\n\n\n\n\n3.2.2 Tipe data\nBerikut Macam - Macam Data yang ada pada data ini.\n\nTipe nominal\n\nmemiliki value 1 yang melambangkan ya dan 0 yang melambangkan tidak. &gt; Pada data ini mencakup fitur : ‘Displaced’, ‘Educational Special Need’, ‘Debtor’, ‘Tuition feed up to date’, ‘Scholarship Holder’, ‘Internacional’.\nmemiliki value perempuan dan laki laki. &gt; yakni pada fitur ‘Gender’.\nmemiliki value siang dan sore hari. &gt; yakni pada fitur ‘Daytime/evening’.\nmencakup tipe data numeric. &gt; yakni pada fitur ‘Application Order’,‘Curricular units 1st sem (credited)’,‘Curricular units 1st sem (enrolled)’,‘Curricular units 1st sem (evaluations)’,‘Curricular units 1st sem (approved)’,‘Curricular units 1st sem (grade)’,dan ‘Curricular units 1st sem (without evaluations)’.\n\nTipe rentang &gt; yakni pada fitur ‘Age at enrollment’.\nTipe ordinal &gt; yakni pada fitur ‘Inflation rate’,‘Unemployment rate’,‘Previous Qualification’, dan ‘GDP’."
  },
  {
    "objectID": "test.html#mengidentifikasi-data",
    "href": "test.html#mengidentifikasi-data",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "3.3 Mengidentifikasi Data",
    "text": "3.3 Mengidentifikasi Data\n\n3.3.1 Missing Value\nMissing Values sesuai dengan namanya yaitu keberadaan nilai yang kosong atau hilang pada data. Pada proses analsisis data hilangnya banyak data dapat menyebabkan akurasi yang dihasilkan semakin menurun\n\n# Menghitung apakah ada nilai yang hilang dalam setiap kolom\nmissing_values = data.isna().any()\n\n# Menampilkan hasil\nprint(\"Hasil Deteksi Missing Values\")\nprint(missing_values)\nprint(\"Total Missing Values :\", missing_values.sum())\n\nHasil Deteksi Missing Values\nMarital status                                    False\nApplication mode                                  False\nApplication order                                 False\nCourse                                            False\nDaytime/evening attendance                        False\nPrevious qualification                            False\nNacionality                                       False\nMother's qualification                            False\nFather's qualification                            False\nMother's occupation                               False\nFather's occupation                               False\nDisplaced                                         False\nEducational special needs                         False\nDebtor                                            False\nTuition fees up to date                           False\nGender                                            False\nScholarship holder                                False\nAge at enrollment                                 False\nInternational                                     False\nCurricular units 1st sem (credited)               False\nCurricular units 1st sem (enrolled)               False\nCurricular units 1st sem (evaluations)            False\nCurricular units 1st sem (approved)               False\nCurricular units 1st sem (grade)                  False\nCurricular units 1st sem (without evaluations)    False\nCurricular units 2nd sem (credited)               False\nCurricular units 2nd sem (enrolled)               False\nCurricular units 2nd sem (evaluations)            False\nCurricular units 2nd sem (approved)               False\nCurricular units 2nd sem (grade)                  False\nCurricular units 2nd sem (without evaluations)    False\nUnemployment rate                                 False\nInflation rate                                    False\nGDP                                               False\nTarget                                            False\ndtype: bool\nTotal Missing Values : 0\n\n\n\n\n3.3.2 Duplikat Data\nMengecek data duplikat adalah proses untuk menemukan dan mengidentifikasi apakah ada entri yang sama atau serupa dalam suatu set data. Fungsi ini umumnya digunakan dalam pengolahan data dan analisis untuk memastikan keakuratan dan konsistensi data.\n\n# menghitung jumlah data redundan\njumlah_duplikat = data.duplicated().sum()\n\n# Menampilkan jumlah data yang duplikat\nprint(\"Jumlah data yang duplikat:\", jumlah_duplikat)\n\nJumlah data yang duplikat: 0\n\n\n\n\n3.3.3 Visualisasi Data\nVisualisasi data menggunakan grafik memiliki beberapa fungsi penting dalam analisis data. Berikut adalah beberapa manfaat utama dari visualisasi data menggunakan grafik:\n\nMeringkas Informasi: Grafik membantu dalam merangkum informasi yang kompleks menjadi bentuk yang lebih mudah dipahami. Dengan melihat grafik, pengguna dapat dengan cepat mendapatkan gambaran umum tentang pola atau tren dalam data.\nMengidentifikasi Pola dan Tren: Grafik memungkinkan pengguna untuk mengidentifikasi pola atau tren dalam data dengan lebih mudah daripada hanya melihat angka-angka mentah. Ini membantu dalam pemahaman yang lebih baik tentang hubungan antar variabel dan perubahan sepanjang waktu.\nMembandingkan Data: Grafik memudahkan perbandingan antara berbagai set data atau variabel. Dengan membandingkan grafik, pengguna dapat melihat perbedaan, kesamaan, atau tren di antara berbagai kategori atau kelompok.\nMengungkap Outlier: Grafik membantu dalam mengidentifikasi outlier atau data yang tidak biasa. Outlier dapat memberikan wawasan tambahan tentang data atau mencerminkan anomali yang perlu diselidiki lebih lanjut.\nMembantu Pengambilan Keputusan: Visualisasi data dapat membantu pengambilan keputusan dengan menyediakan pemahaman yang lebih baik tentang situasi atau masalah. Grafik yang jelas dan informatif dapat mendukung proses pengambilan keputusan yang lebih baik.\nMeningkatkan Komunikasi: Grafik memberikan cara yang lebih efektif untuk berkomunikasi hasil analisis data kepada orang lain yang mungkin tidak memiliki pengetahuan teknis yang sama. Visualisasi dapat membantu mempermudah pemahaman dan memudahkan diskusi.\nMemahami Distribusi Data: Grafik memungkinkan pemahaman yang lebih baik tentang distribusi data, seperti apakah data terdistribusi normal, atau apakah ada skewness atau kurtosis yang signifikan.\nMeningkatkan Daya Ingat: Manusia cenderung lebih baik mengingat informasi visual daripada informasi teks atau numerik. Oleh karena itu, penggunaan grafik dapat meningkatkan daya ingat terhadap informasi yang disajikan.\nMenyoroti Perbedaan dan Kesamaan: Grafik dapat dengan mudah menyoroti perbedaan dan kesamaan antara berbagai kategori atau variabel, membantu dalam menarik kesimpulan yang lebih cepat dan efektif.\nMendorong Eksplorasi Data: Visualisasi data merangsang eksplorasi lebih lanjut terhadap data. Pengguna dapat dengan mudah mengidentifikasi area yang menarik perhatian dan mengeksplorasi lebih dalam untuk pemahaman yang lebih mendalam.\n\nDengan menggunakan grafik, informasi yang terkandung dalam data dapat diungkapkan secara lebih jelas dan dapat dimengerti oleh berbagai pemangku kepentingan, baik yang memiliki latar belakang teknis maupun non-teknis.\n\nimport matplotlib.pyplot as plt\n\n# menampilkan distribusi data di dalam bentuk grafik\ndata.hist(figsize=(14, 14))\nplt.show()\n\n\n\n\n\n\n3.3.4 Proporsi Data\nUntuk mencapai hasil maksimal, perlu dilakukan identifikasi proporsi jumlah data dari masing-masing kelas. Dengan begitu ketidakseimbangan data disetiap kelas pada data red wine ini dapat ditangani dengan menyeimbangkan jumlah data disetiap kelasnya. Dengan ketentuan\nGraduate : 2\nDropout : 0\nEnrolled : 1\n\ndata['Target'].value_counts()\n\nTarget\nGraduate    2209\nDropout     1421\nEnrolled     794\nName: count, dtype: int64"
  },
  {
    "objectID": "test.html#mengidentifikasi-outlier",
    "href": "test.html#mengidentifikasi-outlier",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "3.4 Mengidentifikasi Outlier",
    "text": "3.4 Mengidentifikasi Outlier\nOutlier Pada Data adalah nilai yang berbeda dari yang lain dimana perbedaannya sangat jauh dengan sekumpulan data yang lain dalam satu kolom.Keberadaan Outlier sendiri dinilai dapat mengganggu analisis statistik dan kesimpulan yang diambil dari data karena mereka bisa menyebabkan pergeseran rata-rata atau mengganggu distribusi data secara keseluruhan. Maka dari itu, pada data red wine ini perlu dilakukan identifikasi outlier pada data. Untuk menentukan outluer pada data dapat dengan menggunakan metode Local Outlier Factor.\n\n3.4.0.1 LOCAL OUTLIER FACTOR\nAdalah metode yang digunakan untuk mendeteksi outlier dalam data dengan memperhatikan konteks lokal dari setiap data poin. LOF menghitung seberapa “aneh” atau tidak biasa suatu poin data jika dibandingkan dengan tetangga-tetangganya. Poin yang memiliki LOF tinggi dibandingkan dengan tetangganya dapat dianggap sebagai outlier.\nAdapun tahap-tahp untuk mengidentifikasi outlier pada data dengan menggunakan Local Outlier Factor :\n\nHitung Jarak Antar Data dimana jarak yang dihitung adalah jarak titik yang akan dievaluasi dengan semua titik didalam satu baris. Perhitungan Jarak dilakukan menggunakan perhitungan jarak euclidean. \\[\n\\text{distance}(p, q) = \\sqrt{\\sum_{i=1}^{n}(p_i - q_i)^2}\n\\] dimana : p = titik yang akan dievaluasi q = titik selain titik p\nHitung Kepadatan Lokal Setelah jarak diketahui, maka selanjutnya kepadatan lokal dari titik data tersebut perlu dihitung. Kepadatan lokal dapat dihitung dengan membandingkan jumlah titik-titik tetangga dalam jarak tertentu (radius) terhadap titik data yang sedang dievaluasi. \\[\n\\text{Local Density}(p) = \\frac{\\text{jumlah tetangga dalam radius}}{\\text{jumlah total data}}\n\\]\nHitung Local Reachability Density(LRD) Hitung kepadatan jarak (reachability distance) dari titik data (p) terhadap tetangganya (q). Local Reachability Density dari titik p terhadap tetangga q dihitung sebagai rata-rata dari jarak antara q dan p terhadap tetangga q: \\[\n\\text{reachdist}(p, q) = \\max(\\text{distance}(p, q), \\text{radius})\n\\]\n\n\\[\n\\text{Local Reachability Density}(p) = \\frac{1}{\\text{jumlah tetangga}} \\sum_{q \\in N_{\\text{radius}}(p)} \\frac{\\text{reachdist}(p, q)}{\\text{density}(q)}\n\\]\ndimana: - N radius(p) adalah himpunan tetangga dalam radius tertentu radius dari titik p. - density(q) adalah kepadatan lokal dari tetangga q.\n\nHitung Nilai LOF LOF dari suatu titik data (p) dihitung sebagai rasio dari rata-rata Local Reachability Density dari tetangganya terhadap kepadatan lokalnya sendiri: \\[\n\\text{LOF}(p) = \\frac{1}{\\text{jumlah tetangga}} \\sum_{q \\in N_{\\text{radius}}(p)} \\frac{\\text{Local Reachability Density}(q)}{\\text{Local Reachability Density}(p)}\n\\]\n\ndimana : LOF yang tinggi menunjukkan bahwa titik tersebut memiliki kepadatan lokal yang lebih rendah dibandingkan dengan tetangganya, sehingga cenderung menjadi outlier.\nContoh Kasus, untuk mencari outlier pada data misalkan terdapat tabel seperti dibawah ini:\n\n\n\nX\nY\n\n\n\n\n1\n4\n\n\n2\n3\n\n\n3\n8\n\n\n7\n2\n\n\n5\n9\n\n\n\n\nLangkah 1 : Hitung Jarak Antar Data lalu nilai radius yang diambil adalah 5\n\n\n\n\nX\nY\nJarak\n\n\n\n\n1\n4\n1,41 ; 4,47 ; 4,47\n\n\n2\n3\n1,41 ; 3,16\n\n\n3\n8\n4,47\n\n\n5\n2\n4,47 ; 3,16 ; 4,24\n\n\n8\n5\n4,24\n\n\n\n\nLangkah 2 : Hitung jumlah tetangga dalam radius 5\n\n\n\n\nX\nY\nJumlah Tetangga\n\n\n\n\n1\n4\n3\n\n\n2\n3\n2\n\n\n3\n8\n1\n\n\n5\n2\n3\n\n\n8\n5\n1\n\n\n\n\nLangkah 3 : Hitung Local Reachability Density\n\n\n\n\nX\nY\nJarak\n\n\n\n\n1\n4\n(1,41 + 4,47 + 4,47) / 3 = 3,45\n\n\n2\n3\n(1,41 + 3,16) /2 = 2,285\n\n\n3\n8\n4,47\n\n\n5\n2\n(4,47 + 3,16 + 4,24) / 3 = 3,95\n\n\n8\n5\n4,24\n\n\n\n\nLangkah 4 : Menghitung nilai LOF data\n\n\n\n\nX\nY\nLOF\n\n\n\n\n1\n4\n(1/3,45) x ((2,285 + 4,47 + 3,95) / 3) = 1,03\n\n\n2\n3\n(1/2,285) x ((3,45 + 3,95) / 2) = 1,61\n\n\n3\n8\n(1/4,47) x ((3,45)) = 0,77\n\n\n5\n2\n(1/3,95) x ((3,45 + 2,285 + 4,24) / 3) = 0,83\n\n\n8\n5\n(1/4,24) x ((3,95)) = 0.936\n\n\n\nDengan begitu, nilai yang berkemungkinan menjadi outlier adalah baris 2 dan baris 1\nInter Pretasi Local Outlier Factor :\n\nJika LOF &gt; 1, itu menunjukkan bahwa kepadatan lokal dari titik p lebih rendah daripada rata-rata kepadatan lokal dari tetangganya. Artinya, titik tersebut memiliki sifat yang “aneh” atau berbeda dari lingkungan sekitarnya dan cenderung menjadi outlier.\nJika LOF ≈ 1, itu menunjukkan bahwa kepadatan lokal dari titik p mirip dengan rata-rata kepadatan lokal tetangganya.\nJika LOF &lt; 1, itu menunjukkan bahwa kepadatan lokal dari titik p lebih tinggi daripada rata-rata kepadatan lokal dari tetangganya, sehingga cenderung menjadi titik yang tidak aneh.\n\n\nimport numpy as np \nfrom scipy import stats\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import LabelEncoder\n\n# menampilkan perbandingan jumlah data berdasarkan target\ndata['Target'] = LabelEncoder().fit_transform(data['Target'])\ndata.loc[:,'Target'].value_counts()\n\n# menghitung zscore untuk mendeteksi outliers\nclf = LocalOutlierFactor(n_neighbors=20)  # Jumlah tetangga yang digunakan\noutlier_scores = clf.fit_predict(data)\n\n# mencari data dengan nilai zscore lebih dari 3\noutliers = np.where(outlier_scores == -1)[0]\n\n# menampilkan hasil deteksi outliers\nprint(f\"Total outlier : \", len(outliers))\n\nTotal outlier :  82"
  },
  {
    "objectID": "test.html#menghapus-outlier",
    "href": "test.html#menghapus-outlier",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "4.1 Menghapus Outlier",
    "text": "4.1 Menghapus Outlier\nLangkah yang dapat diambil untuk menangani terdapatnya outlier pada data adalah dapat dengan menghapus baris-baris data yang di beberapa kolomnya mengandung oulier.\n\n# menghapus baris yang termasuk outliers\nlist_from_outlier_indices = outliers.tolist()\ndata_cleaned = data[outlier_scores != -1]  # Mengambil baris yang bukan outlier\n\n# memroses ulang data frame dengan tanpa outliers\ndata_nonoutliers = data_cleaned.reset_index(drop=True)\ndata_nonoutliers.shape\ndata_nonoutliers\n\n\n\n\n\n\n\n\nMarital status\nApplication mode\nApplication order\nCourse\nDaytime/evening attendance\nPrevious qualification\nNacionality\nMother's qualification\nFather's qualification\nMother's occupation\n...\nCurricular units 2nd sem (credited)\nCurricular units 2nd sem (enrolled)\nCurricular units 2nd sem (evaluations)\nCurricular units 2nd sem (approved)\nCurricular units 2nd sem (grade)\nCurricular units 2nd sem (without evaluations)\nUnemployment rate\nInflation rate\nGDP\nTarget\n\n\n\n\n0\n1\n8\n5\n2\n1\n1\n1\n13\n10\n6\n...\n0\n0\n0\n0\n0.000000\n0\n10.8\n1.4\n1.74\n0\n\n\n1\n1\n6\n1\n11\n1\n1\n1\n1\n3\n4\n...\n0\n6\n6\n6\n13.666667\n0\n13.9\n-0.3\n0.79\n2\n\n\n2\n1\n1\n5\n5\n1\n1\n1\n22\n27\n10\n...\n0\n6\n0\n0\n0.000000\n0\n10.8\n1.4\n1.74\n0\n\n\n3\n1\n8\n2\n15\n1\n1\n1\n23\n27\n6\n...\n0\n6\n10\n5\n12.400000\n0\n9.4\n-0.8\n-3.12\n2\n\n\n4\n2\n12\n1\n3\n0\n1\n1\n22\n28\n10\n...\n0\n6\n6\n6\n13.000000\n0\n13.9\n-0.3\n0.79\n2\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4337\n1\n1\n6\n15\n1\n1\n1\n1\n1\n6\n...\n0\n6\n8\n5\n12.666667\n0\n15.5\n2.8\n-4.06\n2\n\n\n4338\n1\n1\n2\n15\n1\n1\n19\n1\n1\n10\n...\n0\n6\n6\n2\n11.000000\n0\n11.1\n0.6\n2.02\n0\n\n\n4339\n1\n1\n1\n12\n1\n1\n1\n22\n27\n10\n...\n0\n8\n9\n1\n13.500000\n0\n13.9\n-0.3\n0.79\n0\n\n\n4340\n1\n1\n1\n9\n1\n1\n1\n22\n27\n8\n...\n0\n5\n6\n5\n12.000000\n0\n9.4\n-0.8\n-3.12\n2\n\n\n4341\n1\n5\n1\n15\n1\n1\n9\n23\n27\n6\n...\n0\n6\n6\n6\n13.000000\n0\n12.7\n3.7\n-1.70\n2\n\n\n\n\n4342 rows × 35 columns\n\n\n\n\n# memisahkan antara kolom fitur dan kolom target\nfitur = data_nonoutliers.drop(columns=['Target'])\ntarget = data_nonoutliers['Target']\n\n# menghitung proporsi setiap data berdasarkan target\ntarget.value_counts()\n\nTarget\n2    2169\n0    1401\n1     772\nName: count, dtype: int64\n\n\n\nimport pandas as pd\n\n# Membuat DataFrame dari fitur dan target yang telah seimbang\ndata_fix = pd.concat([fitur, target], axis=1)\n\n# Menyimpan DataFrame ke dalam file CSV\ndata_fix.to_csv('data_fix.csv', index=False)\n\n\nfrom sklearn.model_selection import train_test_split\n\n# membagi kolom fitur dan kolom target dari file data terbaru\nfitur = data_fix.drop(columns=['Target'])\ntarget = data_fix['Target']\n\nfitur_train, fitur_test, target_train, target_test = train_test_split(fitur, target, test_size=0.25, random_state=42)"
  },
  {
    "objectID": "test.html#normalisasi-data",
    "href": "test.html#normalisasi-data",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "4.2 Normalisasi Data",
    "text": "4.2 Normalisasi Data\nNormalisasi Data adalah salah satu proses dalam pre-processing data untuk mengatur dataset agar memenuhi standar tertentu. Data perlu dilakukan agar dapat mengurangi kemungkinan terjadinya redundansi data. Selain itu, normalisasi dagunakan untuk membantu menghindari anomali dalam pengolahan data dan memungkinkan desain basis data yang lebih efisien.\n\n4.2.1 Menggunakan Standarscaler (zscore)\nMetode StandardScaler adalah salah satu teknik normalisasi yang umum digunakan dalam pengolahan data. Tujuannya adalah untuk menyesuaikan distribusi data agar memiliki mean (rata-rata) nol dan standar deviasi satu. Ini berguna saat bekerja dengan algoritma yang sensitif terhadap skala dan asumsi dasar bahwa data terdistribusi normal atau mendekati distribusi normal.\nProses normalisasi menggunakan StandardScaler melibatkan dua langkah utama: 1. Menghitung Mean dan Standar Deviasi: Pertama, perhitungan rata-rata (mean) dan standar deviasi dari setiap fitur (kolom) dalam data dilakukan. 2. Transformasi Data: Setelah mendapatkan mean dan standar deviasi, nilai dari setiap fitur dikurangi dengan mean dari fitur tersebut, kemudian hasilnya dibagi dengan standar deviasi fitur tersebut. Proses ini dilakukan untuk setiap nilai dalam setiap fitur.\n\nimport pickle\nfrom sklearn.preprocessing import StandardScaler\n\n# menentukan lokasi file pickle akan disimpan\npath = 'zscore_scaler.pkl'\n\n# membuat dan melatih objek StandardScaler\nzscore_scaler = StandardScaler()\nzscore_scaler.fit(fitur_train)\n\n# menyimpan model ke dalam file pickle\nwith open(path, 'wb') as file:\n    pickle.dump(zscore_scaler, file)\n\n# memanggil kembali model normalisasi zscore dari file pickle\nwith open(path, 'rb') as file:\n    zscore_scaler = pickle.load(file)\n\n# menerapkan normalisasi zscore pada data training\nzscore_training = zscore_scaler.transform(fitur_train)\n\n# menerapkan normalisasi zscore pada data testing\nzscore_testing = zscore_scaler.transform(fitur_test)\n\n\n\n4.2.2 Menggunakan Minmaxscaler\nMinMax Scaling adalah salah satu teknik untuk melakukan normalisasi pada data dengan merubah nilai-nilai dalam kumpulan data ke dalam rentang tertentu, biasanya antara 0 dan 1. Tujuan utamanya adalah untuk menjaga skala relatif antarfitur agar tidak mendominasi satu sama lain.\nProses Min-Max Scaling dilakukan dengan langkah-langkah berikut: 1. Identifikasi Rentang: Tentukan rentang nilai yang ingin Anda gunakan. Biasanya, dalam Min-Max Scaling, rentang nilai yang dipilih adalah 0 hingga 1, tetapi ini bisa disesuaikan tergantung pada kasus penggunaan. 2. Hitung Nilai Minimum dan Maksimum: Tentukan nilai minimum (min) dan nilai maksimum (max) dari setiap fitur dalam kumpulan data yang akan dinormalisasi. 3. Normalisasi: Gunakan formula rumusn Min-Max Scaling untuk mengubah nilai-nilai dalam rentang yang ditentukan.\n\nimport pickle\nfrom sklearn.preprocessing import MinMaxScaler\n\n# menentukan lokasi file pickle akan disimpan\npath = 'minmaxscaler.pkl'\n\n# membuat dan melatih objek MinMaxScaler\nminmaxscaler = MinMaxScaler()\nminmaxscaler.fit(fitur_train)\n\n# menyimpan model ke dalam file pickle\nwith open(path, 'wb') as file:\n    pickle.dump(minmaxscaler, file)\n\n# memanggil kembali model normalisasi minmaxscaler dari file pickle\nwith open(path, 'rb') as file:\n    minmaxscaler = pickle.load(file)\n\n# menerapkan normalisasi zscore pada data training\nminmaxtraining = minmaxscaler.transform(fitur_train)\n\n# menerapkan normalisasi zscore pada data testing\nminmaxtesting = minmaxscaler.transform(fitur_test)"
  },
  {
    "objectID": "test.html#eksplorasi-model",
    "href": "test.html#eksplorasi-model",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "4.3 Eksplorasi Model",
    "text": "4.3 Eksplorasi Model\n\n4.3.1 Random Forest\n\nRandom Forest adalah algoritma pembelajaran terawasi yang digunakan untuk tugas klasifikasi dan regresi dalam machine learning. Ini merupakan bagian dari keluarga algoritma yang dikenal sebagai ensemble learning, yang menggabungkan hasil beberapa model untuk meningkatkan kinerja dan ketepatan prediksi.\nKonsep inti dari Random Forest adalah membuat sejumlah besar pohon keputusan saat melakukan prediksi. Setiap pohon keputusan dibuat berdasarkan sampel acak dari data pelatihan dan fitur yang dipilih secara acak. Proses ini mengurangi risiko overfitting (memfitting data pelatihan secara berlebihan) yang sering terjadi pada pohon keputusan tunggal.\nSelama proses pelatihan, setiap pohon keputusan dalam hutan acak memilih subset data yang diambil secara acak dan subset fitur untuk membuat keputusan. Ketika melakukan prediksi, setiap pohon memberikan hasilnya, dan hasil akhir dari Random Forest diperoleh dengan mengambil mayoritas suara dari semua pohon keputusan (untuk klasifikasi) atau rerata hasil (untuk regresi).\nKelebihan dari Random Forest termasuk kemampuannya dalam menangani data yang besar dengan fitur yang banyak, serta kemampuan untuk mengatasi overfitting. Namun, seperti halnya dengan banyak algoritma machine learning, pengaturan parameter yang tidak tepat atau kekurangan pemrosesan data yang tepat dapat mempengaruhi kinerja Random Forest.\nRandom Forest terdiri dari beberapa pohon keputusan yang dibuat secara acak. Untuk setiap pohon keputusan:\n\nSampling Data: Lakukan bootstrap sampling pada dataset (ambil sampel acak dengan penggantian).\nBootstrap Sampling: Proses pengambilan sampel acak dengan penggantian dari dataset yang sama ukuran dengan dataset asli.\nPemilihan Jumlah Pohon (n_estimators): Tentukan jumlah pohon keputusan yang akan dibuat dalam Random Forest.\nPemilihan Fitur: Ambil subset acak dari fitur-fitur yang tersedia untuk membangun pohon.\nPembentukan Pohon: Gunakan algoritma pembentukan pohon (seperti CART atau ID3) untuk membagi data berdasarkan aturan yang paling informatif.\n\n\nfrom sklearn.feature_selection import SelectKBest, mutual_info_classif\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nbest_accuracy_rf_zscore = 0\nbest_k_zscore = 0\nbest_accuracy_rf_minmax = 0\nbest_k_minmax = 0\n\nfor k in range(1, fitur_train.shape[1] + 1):\n    # Buat objek SelectKBest dengan mutual_info_classif sebagai fungsi skor\n    k_best = SelectKBest(score_func=mutual_info_classif, k=k)\n\n    # Fiturkan objek SelectKBest ke data training dan testing untuk kedua normalisasi (zscore dan minmax)\n    zscore_training_terbaik = k_best.fit_transform(zscore_training, target_train)\n    zscore_testing_terbaik = k_best.transform(zscore_testing)\n    minmaxtraining_terbaik = k_best.fit_transform(minmaxtraining, target_train)\n    minmaxtesting_terbaik = k_best.transform(minmaxtesting)\n\n    # Buat dan latih model dengan normalisasi zscore\n    model_zscore = RandomForestClassifier(random_state=42)\n    model_zscore.fit(zscore_training_terbaik, target_train)\n\n    # Lakukan prediksi pada data uji dengan normalisasi zscore\n    y_pred_rf_zscore = model_zscore.predict(zscore_testing_terbaik)\n\n    # Hitung akurasi dengan normalisasi zscore\n    accuracy_rf_zscore = accuracy_score(target_test, y_pred_rf_zscore)\n    # print(k, \"fitur menghasilkan akurasi : \", accuracy_rf_zscore)\n\n    # Buat dan latih model dengan normalisasi minmax\n    model_minmax = RandomForestClassifier(random_state=42)\n    model_minmax.fit(minmaxtraining_terbaik, target_train)\n\n    # Lakukan prediksi pada data uji dengan normalisasi minmax\n    y_pred_rf_minmax = model_minmax.predict(minmaxtesting_terbaik)\n\n    # Hitung akurasi dengan normalisasi minmax\n    accuracy_rf_minmax = accuracy_score(target_test, y_pred_rf_minmax)\n    # print(k, \"fitur menghasilkan akurasi : \", accuracy_rf_minmax)\n\n    # Memeriksa apakah akurasi dengan normalisasi zscore lebih baik dari yang sebelumnya\n    if accuracy_rf_zscore &gt; best_accuracy_rf_zscore:\n        best_accuracy_rf_zscore = accuracy_rf_zscore\n        best_k_zscore = k\n\n    # Memeriksa apakah akurasi dengan normalisasi minmax lebih baik dari yang sebelumnya\n    if accuracy_rf_minmax &gt; best_accuracy_rf_minmax:\n        best_accuracy_rf_minmax = accuracy_rf_minmax\n        best_k_minmax = k\n\nprint(\"Dengan Normalisasi Zscore:\")\nprint(\"Fitur terbaik yang bisa digunakan\", best_k_zscore, \"dengan akurasi : \", best_accuracy_rf_zscore)\n\nprint(\"Dengan Normalisasi Minmax:\")\nprint(\"Fitur terbaik yang bisa digunakan\", best_k_minmax, \"dengan akurasi : \", best_accuracy_rf_minmax)\n\n# Ambil indeks fitur terbaik dari SelectKBest\nbest_feature_indices_zscore = SelectKBest(score_func=mutual_info_classif, k=best_k_zscore).fit(zscore_training, target_train).get_support(indices=True)\nbest_feature_indices_minmax = SelectKBest(score_func=mutual_info_classif, k=best_k_minmax).fit(minmaxtraining, target_train).get_support(indices=True)\n\n# Dapatkan nama fitur terbaik dari indeksnya\nbest_features_zscore = [fitur.columns[i] for i in best_feature_indices_zscore]\nbest_features_minmax = [fitur.columns[i] for i in best_feature_indices_minmax]\n\n\nprint(\"Fitur terbaik yang digunakan (dengan normalisasi Zscore):\")\nprint(best_features_zscore)\n\nprint(\"Fitur terbaik yang digunakan (dengan normalisasi Minmax):\")\nprint(best_features_minmax)\n\nDengan Normalisasi Zscore:\nFitur terbaik yang bisa digunakan 24 dengan akurasi :  0.7753222836095764\nDengan Normalisasi Minmax:\nFitur terbaik yang bisa digunakan 18 dengan akurasi :  0.7780847145488029\nFitur terbaik yang digunakan (dengan normalisasi Zscore):\n['Application mode', 'Course', 'Previous qualification', \"Father's qualification\", \"Mother's occupation\", \"Father's occupation\", 'Tuition fees up to date', 'Gender', 'Scholarship holder', 'Age at enrollment', 'International', 'Curricular units 1st sem (credited)', 'Curricular units 1st sem (enrolled)', 'Curricular units 1st sem (evaluations)', 'Curricular units 1st sem (approved)', 'Curricular units 1st sem (grade)', 'Curricular units 2nd sem (credited)', 'Curricular units 2nd sem (enrolled)', 'Curricular units 2nd sem (evaluations)', 'Curricular units 2nd sem (approved)', 'Curricular units 2nd sem (grade)', 'Curricular units 2nd sem (without evaluations)', 'Inflation rate', 'GDP']\nFitur terbaik yang digunakan (dengan normalisasi Minmax):\n['Application mode', 'Course', \"Mother's occupation\", 'Debtor', 'Tuition fees up to date', 'Scholarship holder', 'Age at enrollment', 'Curricular units 1st sem (enrolled)', 'Curricular units 1st sem (evaluations)', 'Curricular units 1st sem (approved)', 'Curricular units 1st sem (grade)', 'Curricular units 1st sem (without evaluations)', 'Curricular units 2nd sem (credited)', 'Curricular units 2nd sem (enrolled)', 'Curricular units 2nd sem (evaluations)', 'Curricular units 2nd sem (approved)', 'Curricular units 2nd sem (grade)', 'Inflation rate']"
  },
  {
    "objectID": "test.html#confusion-matrix",
    "href": "test.html#confusion-matrix",
    "title": "1  TUGAS KLASIFIKASI DATA PROYEK SAINS DATA - B",
    "section": "6.1 ## CONFUSION MATRIX",
    "text": "6.1 ## CONFUSION MATRIX\nConfusion matrix adalah sebuah tabel yang digunakan dalam evaluasi kinerja model klasifikasi untuk memahami performa model dalam memprediksi kelas-kelas target. Matrix ini memiliki empat sel yang mewakili:\n\nTrue Positive (TP): Prediksi yang benar ketika kelas sebenarnya adalah positif.\nTrue Negative (TN): Prediksi yang benar ketika kelas sebenarnya adalah negatif.\nFalse Positive (FP): Prediksi yang salah ketika model memprediksi positif tetapi kelas sebenarnya negatif (juga dikenal sebagai Type I error).\nFalse Negative (FN): Prediksi yang salah ketika model memprediksi negatif tetapi kelas sebenarnya positif (juga dikenal sebagai Type II error).\n\nBentuk dari tabel Confusion Matrix\n\n\n\n\nPredicted Negative\nPredicted Positive\n\n\n\n\nActual Negative\nTrue Negative (TN)\nFalse Positive (FP)\n\n\nActual Positive\nFalse Negative (FN)\nTrue Positive (TP)\n\n\n\nDari Confusion Matriks, kta dapat menghitung metrik evaluasi seperti akurasi, presisi, recall, F1-score, dan lainnya yang membantu dalam mengevaluasi performa model klasifikasi.\n\n6.1.0.1 Metrik Evaluasi\nMetrik evaluasi adalah ukuran atau parameter yang digunakan untuk mengevaluasi kinerja suatu model atau sistem dalam melakukan tugas tertentu, seperti klasifikasi, regresi, atau tugas lainnya dalam bidang machine learning dan statistika. Metrik-metrik ini membantu dalam memahami seberapa baik atau buruk model tersebut dalam melakukan prediksi atau tugas yang ditetapkan.\nBeberapa metrik evaluasi umum dalam machine learning termasuk: &gt; - Akurasi (Accuracy): Seberapa sering model memberikan prediksi yang benar secara keseluruhan. Rumus Akurasi : \\[ Accuracy = \\frac{TN + TP}{TN + FP + FN + TP} \\] &gt; - Presisi (Precision): Proporsi dari prediksi positif yang benar dibandingkan dengan semua prediksi positif yang dibuat oleh model Rumus Precision : \\[ Precision = \\frac{TP}{TP + FP} \\] &gt; - Recall (Sensitivity atau True Positive Rate): Proporsi dari kelas positif yang diprediksi dengan benar oleh model. Rumus Recall : \\[ Recall = \\frac{TP}{TP + FN} \\] &gt; - F1-Score: Nilai rata-rata harmonik antara presisi dan recall. Berguna ketika perlu menyeimbangkan antara presisi dan recall. Rumus F1-Score : \\[ F1-Score = 2 x \\frac {Presisi x Recall}{Presisi x Recall} \\] &gt; - Specificity (Specificity atau True Negative Rate): Proporsi dari kelas negatif yang diprediksi dengan benar oleh model. Rumus Specificity : \\[ Specificity = \\frac{TN}{TN + FP} \\]\n\nwith open(path_rf, 'rb') as file:\n    model_rf = pickle.load(file)\n\nfrom sklearn.metrics import accuracy_score\n\nmodel_rf.fit(minmaxtraining, target_train)\ny_pred_rf = model_rf.predict(minmaxtesting)\n\n# akurasi\nakurasi_rf = accuracy_score(target_test, y_pred_rf)\nprint('Akurasi Random Forest : ', akurasi_rf)\n\nAkurasi Random Forest :  0.7744533947065593\n\n\n\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n# Mengukur akurasi\naccuracy = accuracy_score(target_test, y_pred_rf)\nprint(f'Akurasi: {accuracy}')\n\n# Menghasilkan dan menampilkan confusion matrix\ncm = confusion_matrix(target_test, y_pred_rf)\nprint(\"Confusion Matrix:\")\nprint(cm)\n\n# Mendapatkan nilai TP, TN, FP, FN dari confusion matrix\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\nTP = cm[1, 1]\n\nprint(\"\\nTrue Positive (TP):\", TP)\nprint(\"True Negative (TN):\", TN)\nprint(\"False Positive (FP):\", FP)\nprint(\"False Negative (FN):\", FN)\n\n# Menampilkan classification report\nprint(\"Classification Report:\")\nprint(classification_report(target_test, y_pred_rf))\n\nAkurasi: 0.7744533947065593\nConfusion Matrix:\n[[205  23  38]\n [ 35  50  69]\n [ 12  19 418]]\n\nTrue Positive (TP): 50\nTrue Negative (TN): 205\nFalse Positive (FP): 23\nFalse Negative (FN): 35\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.81      0.77      0.79       266\n           1       0.54      0.32      0.41       154\n           2       0.80      0.93      0.86       449\n\n    accuracy                           0.77       869\n   macro avg       0.72      0.68      0.69       869\nweighted avg       0.76      0.77      0.76       869"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  }
]